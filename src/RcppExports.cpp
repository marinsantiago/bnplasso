// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// int_sampling
Rcpp::IntegerVector int_sampling(const int& K, const int& num_samples, const Rcpp::NumericVector& probs);
RcppExport SEXP _bnplasso_int_sampling(SEXP KSEXP, SEXP num_samplesSEXP, SEXP probsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int& >::type K(KSEXP);
    Rcpp::traits::input_parameter< const int& >::type num_samples(num_samplesSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type probs(probsSEXP);
    rcpp_result_gen = Rcpp::wrap(int_sampling(K, num_samples, probs));
    return rcpp_result_gen;
END_RCPP
}
// sample_beta_conj_sigma
Eigen::VectorXd sample_beta_conj_sigma(const Eigen::MatrixXd& X, const Eigen::MatrixXd& tX, const Eigen::MatrixXd& tXX, const Eigen::VectorXd& y, const Eigen::VectorXd& tau2, const double sigma2, const double mu);
RcppExport SEXP _bnplasso_sample_beta_conj_sigma(SEXP XSEXP, SEXP tXSEXP, SEXP tXXSEXP, SEXP ySEXP, SEXP tau2SEXP, SEXP sigma2SEXP, SEXP muSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type tX(tXSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type tXX(tXXSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type tau2(tau2SEXP);
    Rcpp::traits::input_parameter< const double >::type sigma2(sigma2SEXP);
    Rcpp::traits::input_parameter< const double >::type mu(muSEXP);
    rcpp_result_gen = Rcpp::wrap(sample_beta_conj_sigma(X, tX, tXX, y, tau2, sigma2, mu));
    return rcpp_result_gen;
END_RCPP
}
// sample_beta_ind_sigma
Eigen::VectorXd sample_beta_ind_sigma(const Eigen::MatrixXd& X, const Eigen::MatrixXd& tX, const Eigen::MatrixXd& tXX, const Eigen::VectorXd& y, const Eigen::VectorXd& tau2, const double sigma2, const double mu);
RcppExport SEXP _bnplasso_sample_beta_ind_sigma(SEXP XSEXP, SEXP tXSEXP, SEXP tXXSEXP, SEXP ySEXP, SEXP tau2SEXP, SEXP sigma2SEXP, SEXP muSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type tX(tXSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type tXX(tXXSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type tau2(tau2SEXP);
    Rcpp::traits::input_parameter< const double >::type sigma2(sigma2SEXP);
    Rcpp::traits::input_parameter< const double >::type mu(muSEXP);
    rcpp_result_gen = Rcpp::wrap(sample_beta_ind_sigma(X, tX, tXX, y, tau2, sigma2, mu));
    return rcpp_result_gen;
END_RCPP
}
// NumVec_to_EigenVec
Eigen::VectorXd NumVec_to_EigenVec(Rcpp::NumericVector& x);
RcppExport SEXP _bnplasso_NumVec_to_EigenVec(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(NumVec_to_EigenVec(x));
    return rcpp_result_gen;
END_RCPP
}
// EigenVec_to_NumVec
Rcpp::NumericVector EigenVec_to_NumVec(const Eigen::VectorXd& x);
RcppExport SEXP _bnplasso_EigenVec_to_NumVec(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(EigenVec_to_NumVec(x));
    return rcpp_result_gen;
END_RCPP
}
// get_tXX
Eigen::MatrixXd get_tXX(const Eigen::MatrixXd& X);
RcppExport SEXP _bnplasso_get_tXX(SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type X(XSEXP);
    rcpp_result_gen = Rcpp::wrap(get_tXX(X));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_bnplasso_int_sampling", (DL_FUNC) &_bnplasso_int_sampling, 3},
    {"_bnplasso_sample_beta_conj_sigma", (DL_FUNC) &_bnplasso_sample_beta_conj_sigma, 7},
    {"_bnplasso_sample_beta_ind_sigma", (DL_FUNC) &_bnplasso_sample_beta_ind_sigma, 7},
    {"_bnplasso_NumVec_to_EigenVec", (DL_FUNC) &_bnplasso_NumVec_to_EigenVec, 1},
    {"_bnplasso_EigenVec_to_NumVec", (DL_FUNC) &_bnplasso_EigenVec_to_NumVec, 1},
    {"_bnplasso_get_tXX", (DL_FUNC) &_bnplasso_get_tXX, 1},
    {NULL, NULL, 0}
};

RcppExport void R_init_bnplasso(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
